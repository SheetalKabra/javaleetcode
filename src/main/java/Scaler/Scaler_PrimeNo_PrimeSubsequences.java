package Scaler;

import java.util.ArrayList;
import java.util.Arrays;

public class Scaler_PrimeNo_PrimeSubsequences {
    public static void main(String[] args) {
//        System.out.println((317504064)&(317504064-1));
//        System.out.println((2147483646)&(2147483646-1));
        System.out.println(solve(new ArrayList<>(Arrays.asList(537445, 926901, 922614, 514341, 811253, 134587, 332929, 169521, 309301, 99047, 493048, 23680, 426435, 549040, 669724, 38772, 249360, 156431, 595861, 31760, 818743, 8556, 114933, 902174, 218987, 106054, 309391, 984351, 290360, 983677, 949410, 759992, 851161, 468751, 316851, 623148, 58170, 865188, 352041, 838209, 247982, 575818, 679500, 813411, 862539, 485042, 816913, 976212, 591756, 517676, 553827, 899763, 742455, 969035, 112450, 217516, 632020, 756573, 309969, 219969, 944239, 828896, 657917, 63912, 172383, 128135, 51637, 38409, 484878, 917656, 935225, 902641, 578567, 821288, 750758, 367881, 911060, 31378, 353147, 937192, 261444, 144618, 96751, 754324, 9329, 270035, 524041, 766413, 774904, 240844, 462742, 161151, 658111, 244610, 670778, 952542, 979626, 512908, 94801, 384461, 478675, 846070, 674279, 19866, 248102, 985307, 913792, 427700, 334315, 325309, 525120, 194427, 690188, 204507, 252529, 431523, 937374, 704400, 69109, 348482, 588997, 824860, 898282, 924705, 69278, 23503, 324790, 977756, 653560, 299578, 951283, 426017, 266084, 999221, 470204, 469955, 157936, 445659, 73464, 579722, 454841, 574409, 486102, 610734, 624008, 723197, 428259, 679911, 206182, 995325, 144179, 716000, 568615, 237168, 597956, 932530, 522274, 144879, 970866, 478762, 171189, 20397, 396835, 275095, 812829, 482258, 832498, 723899, 259240, 387361, 806798, 837711, 365084, 795904, 624191, 734975, 831838, 352050, 682325, 431130, 32519, 305811, 800905, 214304, 261106, 956659, 260047, 980099, 853644, 585468, 555708, 322928, 266303, 375378, 939610, 279033, 473698, 241236, 659114, 857787, 510307, 60562, 359169, 823218, 301188, 33599, 855339, 723258, 652855, 182052, 667131, 940660, 868122, 505984, 153214, 599535, 112495, 479223, 4218, 268623, 955171, 768115, 97171, 323028, 38771, 101052, 632479, 204019, 476422, 562580, 568321, 732080, 276855, 937274, 819959, 829273, 663109, 800582, 755477, 757226, 512581, 605678, 85787, 624515, 107703, 874282, 814512, 403885, 288418, 632602, 576803, 29030, 282106, 614416, 805015, 441926, 611985, 115724, 456712, 484748, 16670, 837329, 469230, 667785, 580823, 112448, 116304, 592279, 778945, 365190, 923149, 204935, 64, 204229, 898468, 749833, 980325, 792187, 860258, 705662, 352283, 968729, 733207, 649872, 638612, 60152, 693192, 883714, 671400, 866066, 949668, 522261, 276963, 544317, 752227, 496459, 946676, 933712, 846948, 33534, 861918, 655423, 739949, 352921, 509183, 926697, 203973, 856400, 24569, 362716, 406534, 583644, 203639, 120605, 953373, 144488, 521086, 269484, 216261, 423067, 321827, 934871, 307056, 649632, 922270, 768718, 428590, 45106, 774390, 613184, 521252, 351260, 828110, 209513, 735021, 547376, 83533, 325935, 724769, 464781, 136062, 350218, 484596, 665570, 938393, 853779, 350738, 319075, 609090, 24236, 107816, 454688, 48937, 645977, 869054, 326279, 715760, 912251, 379885, 27019, 80296, 8032, 53860, 480230, 863570, 696621, 947746, 258263, 763805, 308926, 114707, 515969, 799428, 743511, 439976, 173754, 548525, 778765, 453527, 275132, 745353, 52090, 72994, 896758, 447157, 768681, 155775, 311569, 142689, 71268, 814189, 562870, 282485, 926862, 850322, 539806, 552445, 421979, 338763, 834729, 71911, 882238, 932043, 135325, 244812, 576233, 894901, 213335, 93185, 197201, 819822, 160713, 318744, 181346, 995793, 543019, 623505, 413309, 626445, 404698, 207838, 610267, 244546, 317025, 486911, 702028, 125970, 529463, 637961, 892778, 516741, 827374, 151080, 97181, 907147, 734724, 571477, 109714, 828830, 821441, 580629, 455993, 32536, 903049, 144509, 400254, 628556, 800397, 931053, 157135, 622893, 448281, 34494, 939231, 63227, 725562, 424930, 173198, 134611, 498549, 198488, 2176, 830490, 444080, 760104, 555775, 433664, 505466, 553342, 762754, 166118, 424798, 137086, 12766, 128232, 265544, 88002, 863428, 250996, 501207, 956319, 778450, 369829, 714499, 807197, 406114, 487949, 913464, 525780, 160595, 373897, 901609, 480735, 496585, 59486, 784101, 487201, 718967, 309979, 697664, 910099, 429795, 227549, 770610, 309688, 86556, 652504, 333936, 838341, 21769, 640752, 915836, 314872, 307082, 86614, 827803, 997676, 159934, 106228, 365580, 845681, 422081, 871612, 917369, 532130, 356253, 987581, 402625, 849950, 538789, 99637, 961016, 363588, 625214, 497331, 895141, 859508, 269292, 47401, 165937, 393869, 173045, 281787, 22001, 414971, 199590, 892062, 393055, 58371, 329167, 910474, 265230, 584264, 230383, 405843, 566220, 943546, 577542, 298874, 181881, 626502, 237192, 775484, 324593, 980597, 586190, 306280, 469540, 833310, 377679, 478945, 878568, 175989, 172825, 693649, 981062, 423544, 355223, 479573, 833456, 751141, 879503, 485623, 63449, 407199, 427358, 898787, 553255, 871411, 670163, 959192, 6200, 34348, 302497, 805728, 516315, 542587, 798281, 298896, 643903, 790638, 701033, 891617, 246611, 616352, 475815, 977326, 755026, 250509, 6927, 922844, 956366, 440126, 789820, 684993, 166822, 213498, 559263, 484437, 970211, 718793, 575416, 835960, 289173, 167840, 836213, 917036, 396146, 82225, 112344, 438545, 52768, 793868, 932307, 858868, 271462, 881698, 196647, 426667, 700575, 162898, 38791, 276202, 850330, 561842, 260718, 685106, 395436, 136670, 777487, 39208, 706412, 579270, 547682, 169068, 998182, 484258, 478558, 352660, 547765, 758453, 789067, 893626, 851831, 156274, 375605, 207426, 28061, 680409, 4795, 969780, 210080, 711628, 452518, 951815, 370589, 760782, 982087, 746005, 474696, 142198, 606900, 331950, 814502, 901520, 735849, 808598, 839801, 555617, 22849, 662435, 233292, 297406, 312407, 949797, 493566, 523394, 688990, 492359, 238469, 67019, 300234, 186505, 417558, 235062, 630371, 818561, 38879, 689244, 554348, 471497, 319968, 439971, 342977, 651714, 752507, 630699, 246702, 558736, 827964, 705497, 53084, 183116, 147793, 98887, 47672, 946474, 821675, 116623, 927241, 888358, 796025, 375538, 814390, 585183, 576128, 823696, 480591, 319351, 188021, 200245, 127434, 901451, 840562, 297174, 96522, 917606, 902542, 731408, 842213, 416581, 351128, 153034, 280067, 608392, 66663, 737009, 104849, 78108, 2480, 56433, 985165, 701043, 98243, 396769, 772237, 605483, 674173, 630973, 585530, 903088, 934501, 687427, 477400, 155050, 323115, 552298, 232526, 766469, 8857, 113685, 835717, 34068, 978048, 641564, 490203, 505398, 647714, 53299, 888889, 943811, 898002, 245216, 76341, 919752, 969417, 459984, 955226, 34601, 151828, 975787, 786417, 361842, 62065, 983020, 603759, 118025, 214174, 569003, 913278, 768427, 158813, 141700, 313949, 4905, 602724, 14594, 984553, 769252, 999064, 90082, 396779, 305538, 384275, 71397, 440915, 904886, 254322, 626452, 352290, 637269, 992796, 676208, 971932, 39037, 479946, 632883, 951296, 161215, 633424, 880769, 681978, 912160, 462441, 537467, 242943, 648867, 734045, 138102, 907390, 370840, 584119, 824034, 150719, 412312, 335255, 507024, 556329, 87197, 945069, 41031, 970328, 28167, 54146, 754045, 749133, 219890, 657790, 848116, 990285, 911979, 696585, 992796, 790929, 848553, 176525, 734162, 522964, 373637, 585231, 878742, 948254, 88033, 663050, 123059, 842711, 842427))));
//        System.out.println(solve(new ArrayList<>(Arrays.asList(1,2,3))));
//        System.out.println(solve(new ArrayList<>(Arrays.asList(789547, 781145, 138650, 806107, 269396, 172145, 358781, 274684, 137758, 145757, 763397, 983210, 64733, 285967, 98761, 44034, 672284, 163226, 213227, 704362, 656460, 606602, 725127, 997270, 112846, 915162, 355703, 820843, 600889, 71967, 112226, 915566, 743745, 908372, 72112, 243218, 130631, 638302, 372508, 411883, 108595, 872392, 305788, 641038, 125301, 145065, 206640, 31514, 781131, 114359, 104604, 640484, 725473, 797159, 51541, 413976, 552613, 35995, 478057, 365182, 451557, 817245, 587926, 147990, 695591, 638160, 302898, 251043, 494200, 902051, 555336, 443668, 760579, 462165, 280923, 987564, 572604, 812424, 764443, 115670, 770779, 968606, 658056, 1617, 523627, 780897, 189588, 640397, 639456, 876334, 995152, 599675, 685226, 51917, 210882, 331180, 533582, 49083, 187195, 933081, 581168, 113657, 64470, 118984, 31706, 610107, 939685, 290495, 86313, 177648, 400664, 180666, 691091, 631915, 818086, 636434, 807475, 881662, 357188, 783256, 499311, 925062, 497064, 986658, 752767, 459142, 624338, 292730, 611579, 622005, 285063, 846202, 306104, 111739, 386925, 630152, 83939, 886805, 373398, 737738, 693164, 70163, 169714, 400129, 645743, 949925, 585654, 130065, 867410, 883032, 375835, 170623, 374063, 792406, 797497, 272737, 259805, 969265, 960833, 263737, 346880, 479293, 49884, 658669, 918425, 44021, 988581, 720836, 205378, 468111, 344545, 388318, 4194, 812990, 160590, 421810, 153624, 433445, 535490, 164909, 121592, 781608, 682366, 81484, 398156, 549705, 267216, 324949, 835459, 208573, 84222, 818562, 292487, 323237, 939441, 447987, 650216, 314243, 663863, 259982, 872811, 769705, 259989, 219995, 789203, 410537, 215211, 37542, 955513, 599133, 113961, 515129, 602989, 50506, 36135, 533904, 445104, 499441, 110649, 65224, 899240, 717717, 556881, 640018, 16345, 943526, 651008, 179703, 548524, 736434, 563758, 193392, 886691, 662141, 159232, 980362, 599883, 269155, 719995, 355739, 34693, 271239, 692071, 977093, 182897, 890822, 550481, 49424, 479464, 326544, 573579, 653230, 101542, 917426, 116061, 884370, 875863, 967759, 237137, 3522, 501552, 25719, 394080, 258805, 225668, 357636, 467016, 884597, 815110, 553505, 749734, 927301, 364238, 880634, 729017, 735235, 646395, 435080, 115093, 787145, 206313 ))));
//        System.out.println(solve(new ArrayList<>(Arrays.asList(239531, 508071, 111631, 350801, 803979, 452512, 431676, 58112, 902290, 536224, 179891, 284155, 151670, 483842, 715934, 330153, 957756, 235632, 728692, 368476, 180763, 576522, 457739, 794877, 978466, 82085, 626646, 33769 ))));
    }
    public static int solve(ArrayList<Integer> A) {
        //formula of calculating subsequences are : 2^n if blank subsequence is considered
        //if blank not considered, the 2^n-1
        //So in this question, we will first find out the no of prime numbers, then return 2^noOfPrimesNo-1
        int m = 1000000007;
        int N = A.size();
        System.out.println(N);
        int countPrimes = 0;
        for(int i=0; i<N; i++){
            System.out.print(A.get(i)+" ");
            //System.out.println(countFactors(A.get(i)));
            if(countFactors(A.get(i)) == 2){
                countPrimes++;
            }
        }
        System.out.println("");
        //System.out.println("countPrimes:"+countPrimes);
        return pow(2, countPrimes, m) - 1;
    }
    public static int pow(int A, int B, int C){
        if(A == 0 && B == 0){
            return 0;
        }
        if(B == 0){
            return 1;
        }
        long half = pow(A, B/2, C);
        if (B%2 == 0) {
            return (int)(((half%C * half%C) + C)%C);
        } else {
            return (int)(((half%C * half%C) * A%C + C)%C);
        }
    }

    public static int countFactors(int N){
        int count = 0;
        for(int i=1; i*i<=N; i++){
            if(N%i == 0){
                if(i == N/i){
                    count++;
                }else{
                    count+=2;
                }
            }
        }
        return count;
    }

    public int solve1(ArrayList<Integer> A) {
        //formula of calculating subsequences are : 2^n if blank subsequence is considered
        //if blank not considered, the 2^n-1
        //So in this question, we will first find out the no of prime numbers, then return 2^noOfPrimesNo-1
        int max = Integer.MIN_VALUE;
        int N = A.size();
        for(int i=0; i<N; i++){
            max = Math.max(max, A.get(i));
        }
        ArrayList<Integer> primes = new ArrayList<>();
        primes.add(0,0);
        primes.add(1,0);
        for(int i=2;i<=max;i++){
            primes.add(i, 1);
        }

        for(int i=0;i<=max; i++){
            if(primes.get(i) == 1 && (long)i*i<=max){
                for(int j=i*i; j<=max; j+=i){
                    primes.set(j, 0);
                }
            }
        }
        int count = 0;
        for(int i=0; i<N; i++){
            if(primes.get(A.get(i)) == 1){
                count++;
            }
        }
        return (int)Math.pow(2, count) - 1;
    }
}
